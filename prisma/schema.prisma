// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int            @id @default(autoincrement())
  name      String?
  email     String         @unique
  password  String
  phone     String?
  role      UserRole      @default(CLIENT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  tokens    RefreshToken[]
  customer  Customer?
  employee  Employee?
}

enum UserRole {
  CLIENT
  EMPLOYEE
  ADMIN
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Customer {
  id         Int          @id @default(autoincrement())
  cpf        String?
  dataNasc   DateTime     @default(now())
  endereco   String?
  userId     Int          @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduling Scheduling[]
}

model Employee {
  id             Int       @id @default(autoincrement())
  specialization String?
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service        Service[]
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String
  duration    Int
  price       Float
  description String
  employeeId  Int?         @unique
  employee    Employee?    @relation(fields: [employeeId], references: [id])
  time        Time[]
  scheduling  Scheduling[]
}

model Time {
  id         Int         @id @default(autoincrement())
  startTime  DateTime
  isBusy     Boolean     @default(false)
  serviceId  Int
  service    Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  scheduling Scheduling?
}

model Scheduling {
  id         Int      @id @default(autoincrement())
  date       DateTime
  status     Status
  serviceId  Int
  timeId     Int      @unique
  customerId Int
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  time       Time     @relation(fields: [timeId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

enum Status {
  SCHEDULED
  CANCELED
}
